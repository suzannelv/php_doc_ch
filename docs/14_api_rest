---
sidebar_position: 14
slug: api_rest
---

# API REST

REST 代表**RE**presentational **S**tate **T**ransfer，這是在開發 API 時可用的架構風格。 它由[Roy Fielding](https://en.wikipedia.org/wiki/Roy_Fielding)於 2000 年設計。

## 資源

REST API 將公開關於**資源**的**操作**。 每個操作都代表了更改應用程式內資源狀態的可能性。

通常，我們會為資源使用**名稱**。 儘管這可能會有所變化，透過 API 公開的資源, 我們將首先定義名稱，以表示我們資料庫中的表。

因此，我們可以找到像 `users`、`products`、`emails` 等資源...

:::info 名稱和動詞
有時，當我們定義資源時，我們當然可以使用動詞。 這些資源並不總是代表資料庫中的表。

例如，如果我實現了一個搜尋引擎，並希望透過我的應用程式介面提供該搜尋引擎，那麼在我的應用程式介面中就需要一個 `/search` **端點**。
:::

## 操作

對於資料庫表來說，最常見的操作通常可以簡化為 CRUD（Create/Read/Update/Delete），用於管理該表的記錄的生命週期。

### HTTP 動詞

實際上，HTTP 協定的實現方式已經允許我們表示對資源執行操作。

因此，更容易定義一個**資源的端點**，然後根據需要使用不同的**HTTP 方法**。

讓我們來看看不同的 HTTP 方法以及在呼叫 REST API 時它們的含義：

> 假設我們的範例資源是一個名為 `emails` 的資源，具有端點 `/emails`。

| 操作                  | 描述                                                                     | 範例                               |
| --------------------- | ------------------------------------------------------------------------ | ---------------------------------- |
| `GET /emails`         | 獲取所有電子郵件                                                         | `GET /emails`                      |
| `GET /emails/{id}`    | 檢索 id 位於 URL 中的電子郵件                                            | `GET /emails/4`                    |
| `POST /emails`        | 根據請求正文中提供的資料建立新電子郵件                                   | `POST /emails { "test@test.com"}`  |
| `PUT /emails/{id}`    | 將現有電子郵件替換為請求正文中指定的新數據，或建立電子郵件（如果不存在） | `PUT /emails/6 { "bob@test.com"} ` |
| `PATCH /emails/{id}`  | 使用請求正文中指定的資料部分更新現有電子郵件                             | `PATCH /emails/6 {"bob@test.com"}` |
| `DELETE /emails/{id}` | 從資料庫中刪除一封電子郵件                                               | `DELETE /emails/6`                 |
